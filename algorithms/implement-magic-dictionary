

We want to implement a data structure that will be intialized with a list of
distinct strings, then you will be given another string and you should find if
you can change exactly one letter of this string to match any string in the
data structure.

Implement the `MagicDictionary` class:

  * `MagicDictionary()` Initializes the object.
  * `void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.
  * `bool search(String searchWord)` Returns `true` if you can change exactly one character in `word` to match any string in the data structure, otherwise returns `false`.



Example 1:

    
    
    Input
    ["MagicDictionary", "buildDict", "search", "search", "search", "search"]
    [[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
    Output
    [null, null, false, true, false, false]
    
    Explanation
    MagicDictionary magicDictionary = new MagicDictionary();
    magicDictionary.buildDict(["hello", "leetcode"]);
    magicDictionary.search("hello"); // return False
    magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
    magicDictionary.search("hell"); // return False
    magicDictionary.search("leetcoded"); // return False
    



Constraints:

  * `1 <= dictionary.length <= 100`
  * `1 <= dictionary[i],length <= 100`
  * `dictionary[i]` consist of only lower-case English letters.
  * All strings in `dictionary` are distinct.
  * `1 <= searchWord.length <= 100`
  * `searchWord` consist of only lower-case English letters.
  * At most `100` calls will be made to `search` and `buildDict`,

Exp Starter Code:
class MagicDictionary {public:/** Initialize your data structure here. */MagicDictionary() {}void buildDict(vector<string> dictionary) {}bool search(string searchWord) {}};​/*** Your MagicDictionary object will be instantiated and called as such:* MagicDictionary* obj = new MagicDictionary();* obj->buildDict(dictionary);* bool param_2 = obj->search(searchWord);*/​