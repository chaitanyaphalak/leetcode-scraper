

Given a binary tree, collect a tree's nodes as if you were doing this: Collect
and remove all leaves, repeat until the tree is empty.



Example:

    
    
    Input: [1,2,3,4,5]
      
              1
             / \
            2   3
           / \     
          4   5    
    
    Output: [[4,5,3],[2],[1]]
    



Explanation:

1\. Removing the leaves `[4,5,3]` would result in this tree:

    
    
              1
             / 
            2          
    



2\. Now removing the leaf `[2]` would result in this tree:

    
    
              1          
    



3\. Now removing the leaf `[1]` would result in the empty tree:

    
    
              []         
    

[[3,5,4],[2],[1]], [[3,4,5],[2],[1]], etc, are also consider correct answers
since per each level it doesn't matter the order on which elements are
returned.

Exp Starter Code:
/*** Definition for a binary tree node.* struct TreeNode {*     int val;*     TreeNode *left;*     TreeNode *right;*     TreeNode() : val(0), left(nullptr), right(nullptr) {}*     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}*     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}* };*/class Solution {public:vector<vector<int>> findLeaves(TreeNode* root) {}};â€‹